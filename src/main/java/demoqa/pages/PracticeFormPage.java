//‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//üîπ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ if –∏/–∏–ª–∏ try-catch –¥–ª—è –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –æ—Ç —Å–±–æ–µ–≤.
//üîπ –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å —Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å.
//üîπ –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (NoSuchElementException, IllegalArgumentException).
//
//üìå –®–∞–≥–∏:
//1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å –Ω–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.
//2Ô∏è‚É£ –í—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
//3Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ Exception, –≤—ã–≤–æ–¥—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

package demoqa.pages;

import demoqa.core.BasePage;
import org.openqa.selenium.*;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.File;
import java.time.Duration;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

public class PracticeFormPage extends BasePage {
    public PracticeFormPage(WebDriver driver, WebDriverWait wait) {
        super(driver, wait);
    }


    @FindBy(id = "firstName")
    WebElement firstName;
    @FindBy(id = "lastName")
    WebElement lastName;
    @FindBy(id = "userEmail")
    WebElement userEmail;
    @FindBy(id = "userNumber")
    WebElement userNumber;

    public PracticeFormPage enterPersonalData(String name, String surName, String email, String number) {
        type(firstName, name);
        type(lastName, surName);
        type(userEmail, email);
        type(userNumber, number);
        System.out.printf("‚úÖ Personal data: [%s], [%s], [%s], [%s]%n", name, surName, email, number);
        return this;
    }

    public PracticeFormPage selectGender(String gender) {

        try {
            String xpathGender = "//label[.='" + gender + "']";
            WebElement genderLocator = driver.findElement(By.xpath(xpathGender));
            click(genderLocator);
            System.out.printf("‚úÖ Gender: [%s]%n", gender);
        } catch (NoSuchElementException e) {
            throw new NoSuchElementException("‚õî Gender element not found: [" + gender + "]. " + e.getMessage());
        } catch (Exception e) {
            throw new RuntimeException("‚ùå Error selecting gender: [" + gender + "]. " + e);
        }
        return this;
    }

    @FindBy(id = "dateOfBirthInput")
    WebElement dateOfBirthInput;

    public PracticeFormPage chooseDateAsString(String date) {
        //type(dateOfBirthInput, date);
        click(dateOfBirthInput);

        if (System.getProperty("os.name").contains("Mac")) {
            dateOfBirthInput.sendKeys(Keys.COMMAND, "a");
        } else {
            dateOfBirthInput.sendKeys(Keys.CONTROL, "a");
        }
        dateOfBirthInput.sendKeys(date);
        dateOfBirthInput.sendKeys(Keys.ENTER);
        System.out.printf("‚úÖ Date: [%s]%n", date);
        return this;
    }

    @FindBy(id = "subjectsInput")
    WebElement subjectsInput;

    public PracticeFormPage enterSubjects(String[] subjects) {

        for (String subject : subjects) {
            type(subjectsInput, subject);
            subjectsInput.sendKeys(Keys.ENTER);
            System.out.printf("‚úÖ Subject: [%s]%n", subject);
        }
        return this;
    }

    public PracticeFormPage chooseHobbies(String[] hobbies) {
        for (String hobby : hobbies) {
            By hobbyLocator = By.xpath("//label[.='" + hobby + "']");
            WebElement element = driver.findElement(hobbyLocator);
            click(element);
            System.out.printf("‚úÖ Hobby: [%s]%n", hobby);
        }
        return this;
    }
// ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –º–µ—Ç–æ–¥ uploadPicture()
//üîπ –ö–æ–≥–¥–∞ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∏–º—è —Ñ–∞–π–ª–∞.
//üîπ –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.
//
//üìå –®–∞–≥–∏:
//1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ uploadPicture.sendKeys(imgPath).
//2Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ getAttribute("value") –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
//3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∏–º—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º.
//
//üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:
//–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ shouldHaveText() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.

    @FindBy(id = "uploadPicture")
    WebElement uploadPicture;

    public PracticeFormPage uploadPicture(String imgPath) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null
        if (imgPath == null) {
            throw new IllegalArgumentException("‚õî Image path can't be null.");
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if (imgPath.isEmpty()) {
            throw new IllegalArgumentException("‚õî Image path can't be empty.");
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        File file = new File(imgPath);
        if (!file.exists()) {
            throw new IllegalArgumentException("‚õî File not found at path: " + imgPath);
        }

        try {
            uploadPicture.sendKeys(imgPath);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            String uploadedFileName = uploadPicture.getAttribute("value");
            uploadedFileName = uploadedFileName.substring(uploadedFileName.lastIndexOf("\\") + 1);

            if (!uploadedFileName.equals(imgPath.substring(imgPath.lastIndexOf("\\") + 1))) {
                throw new IllegalArgumentException("‚õî Uploaded file name does not match: Expected ["
                        + imgPath.substring(imgPath.lastIndexOf("\\") + 1)
                        + "], but found [" + uploadedFileName + "]");
            }
            System.out.printf("‚úÖ Image uploaded successfully: [%s]%n", uploadedFileName);
        } catch (NoSuchElementException e) {
            throw new NoSuchElementException("‚õî Upload element not found: " + e.getMessage());
        } catch (Exception e) {
            throw new RuntimeException("‚ùå Error uploading image: " + e);
        }

        return this;
    }
// ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –¥–∞—Ç—ã —á–µ—Ä–µ–∑ Select
//üîπ –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ .chooseDate("04", "May", "1965").
//üîπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Select –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞.
//üîπ –î–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –º–µ—Å—è—Ü–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–∫–∞—Ç–æ—Ä –∏ –∫–ª–∏–∫–∞—Ç—å –ø–æ –Ω–µ–º—É.
//
//üìå –®–∞–≥–∏:
//1Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –≥–æ–¥ —á–µ—Ä–µ–∑ Select.
//2Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü —á–µ—Ä–µ–∑ Select.
//3Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º—É XPath //div[contains(@class,'year') and contains(@class,'month') and contains(@class,'day')]. ‚ö†Ô∏è –≠—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä
//
//üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:
//üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–∫–∞—Ç–æ—Ä —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –∏–∑ —Å–æ—Å–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞.

    @FindBy(className = "react-datepicker__month-select")
    WebElement monthSelect;
    @FindBy(className = "react-datepicker__year-select")
    WebElement yearSelect;

    public PracticeFormPage chooseDate(String day, String month, String year) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π
        if (day == null || day.isEmpty() || !day.matches("\\d{1,2}")) {
            throw new IllegalArgumentException("‚õî Invalid day: " + day);
        }
        int dayInt = Integer.parseInt(day);
        if (dayInt < 1 || dayInt > 31) {
            throw new IllegalArgumentException("‚õî Day out of range: " + day);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—è—Ü–µ–≤
        List<String> validMonths = Arrays.asList("January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December");
        if (month == null || month.isEmpty() || !validMonths.contains(month)) {
            throw new IllegalArgumentException("‚õî Invalid month: " + month);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞
        if (year == null || !year.matches("\\d{4}")) {
            throw new IllegalArgumentException("‚õî Invalid year: " + year);
        }
        int yearInt = Integer.parseInt(year);
        int currentYear = LocalDate.now().getYear();
        if (yearInt < 1900 || yearInt > currentYear) {
            throw new IllegalArgumentException("‚õî Year out of range: " + year);
        }

        try {
            click(dateOfBirthInput);

            // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Å—è—Ü
            WebElement monthDropdown = driver.findElement(By.className("react-datepicker__month-select"));
            monthDropdown.click();
            WebElement monthOption = driver.findElement(By.xpath("//select[@class='react-datepicker__month-select']/option[text()='" + month + "']"));
            monthOption.click();

            // –í—ã–±–∏—Ä–∞–µ–º –≥–æ–¥
            WebElement yearDropdown = driver.findElement(By.className("react-datepicker__year-select"));
            yearDropdown.click();
            WebElement yearOption = driver.findElement(By.xpath("//select[@class='react-datepicker__year-select']/option[text()='" + year + "']"));
            yearOption.click();

            // –õ–æ–∫–∞—Ç–æ—Ä –¥–Ω—è
            String dayLocator = String.format("//div[contains(@class,'react-datepicker__day--0%s') and not(contains(@class, 'outside-month'))]", day);
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement dayElement = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(dayLocator)));
            dayElement.click();

            System.out.printf("‚úÖ Date selected: [%s %s %s]%n", day, month, year);
        } catch (NoSuchElementException e) {
            throw new NoSuchElementException("‚õî Date element not found: " + e.getMessage());
        } catch (Exception e) {
            throw new RuntimeException("‚ùå Error selecting date: " + e);
        }

        return this;
    }

    public PracticeFormPage openUploadedPictureInNewTab(String imgPath) {

        String filePath = "file:///" + imgPath.replace("\\", "/");

        ((JavascriptExecutor) driver).executeScript("window.open('" + filePath + "', '_blank');");

        System.out.printf("üé® Image displayed in new browser tab: [%s]%n", filePath);

        return this;
    }

    // –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
    @FindBy(id = "currentAddress")
    WebElement currentAddress;

    public PracticeFormPage enterCurrentAddress(String address) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null –∏ –ø—É—Å—Ç–æ—Ç—É
        if (address == null || address.isEmpty()) {
            throw new IllegalArgumentException("‚õî Address can't be null or empty.");
        }

        currentAddress.clear();
        currentAddress.sendKeys(address);
        System.out.printf("‚úÖ Current Address: [%s]%n", address);
        return this;
    }

    // –í—ã–±–æ—Ä —à—Ç–∞—Ç–∞
    @FindBy(id = "react-select-3-input")
    WebElement stateInput;

    public PracticeFormPage enterState(String state) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null –∏ –ø—É—Å—Ç–æ—Ç—É
        if (state == null || state.isEmpty()) {
            throw new IllegalArgumentException("‚õî State can't be null or empty.");
        }

        stateInput.sendKeys(state);
        stateInput.sendKeys(Keys.ENTER);
        System.out.printf("‚úÖ State selected: [%s]%n", state);
        return this;
    }

    // –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    @FindBy(id = "react-select-4-input")
    WebElement cityInput;

    public PracticeFormPage enterCity(String city) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null –∏ –ø—É—Å—Ç–æ—Ç—É
        if (city == null || city.isEmpty()) {
            throw new IllegalArgumentException("‚õî City can't be null or empty.");
        }

        cityInput.sendKeys(city);
        cityInput.sendKeys(Keys.ENTER);
        System.out.printf("‚úÖ City selected: [%s]%n", city);
        return this;
    }

    // –ö–Ω–æ–ø–∫—É Submit
    @FindBy(id = "submit")
    WebElement submitButton;

    public PracticeFormPage submitForm() {
        ((JavascriptExecutor) driver).executeScript("arguments[0].click();", submitButton);
        System.out.println("üöÄ Form submitted");
        return this;
    }
    //@FindBy(id = "submit")
    //WebElement submitButton;
    //
    //public PracticeFormPage submitForm() {
    //    click(submitButton);
    //    return this;
    //}

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    public PracticeFormPage verifySuccessRegistration(String message) {
        WebElement successMessage = driver.findElement(By.xpath("//div[contains(@class,'modal-title') and text()='" + message + "']"));
        if (successMessage.isDisplayed()) {
            System.out.printf("üéâ Success message displayed: [%s]%n", message);
        } else {
            throw new AssertionError("‚õî Success message not displayed");
        }
        return this;
    }
    // –∑–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    public PracticeFormPage closeSuccessModal() {
        WebElement closeButton = driver.findElement(By.id("closeLargeModal"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].click();", closeButton);
        System.out.println("‚úÖ Success modal closed");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å
        wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id("closeLargeModal")));

        // –í—ã–≤–æ–¥–∏–º Alert —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ü—Ä–æ–µ–∫—Ç –∑–∞–∫–æ–Ω—á–µ–Ω!"
        ((JavascriptExecutor) driver).executeScript("alert('üéâ –ü—Ä–æ–µ–∫—Ç –∑–∞–∫–æ–Ω—á–µ–Ω!');");
        System.out.println("üéâ –ü—Ä–æ–µ–∫—Ç –∑–∞–∫–æ–Ω—á–µ–Ω!");
        return this;
    }


}

